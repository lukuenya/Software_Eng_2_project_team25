/*
 * NineToFive API
 * This is NineToFive API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ndummatt@ece.auth.gr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NineToFiveApi);
  }
}(this, function(expect, NineToFiveApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NineToFiveApi.AnnouncementApi();
  });

  describe('(package)', function() {
    describe('AnnouncementApi', function() {
      describe('addAnnouncement', function() {
        it('should call addAnnouncement successfully', function(done) {
          // TODO: uncomment, update parameter values for addAnnouncement call and complete the assertions
          /*
          var userid = 56;
          var body = new NineToFiveApi.Body1();
          body.title = "";
          body.experience = "";
          body.education = "";
          body.preview = "";
          body.salary = 0;
          body.schedule = 0;

          instance.addAnnouncement(userid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(NineToFiveApi.InlineResponse2002);
            expect(data.announcementid).to.be.a('number');
            expect(data.announcementid).to.be("0");
            expect(data.userid).to.be.a('number');
            expect(data.userid).to.be("0");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.experience).to.be.a('string');
            expect(data.experience).to.be("");
            expect(data.education).to.be.a('string');
            expect(data.education).to.be("");
            expect(data.preview).to.be.a('string');
            expect(data.preview).to.be("");
            expect(data.salary).to.be.a('number');
            expect(data.salary).to.be(0);
            expect(data.schedule).to.be.a('number');
            expect(data.schedule).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteAnnouncement', function() {
        it('should call deleteAnnouncement successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteAnnouncement call
          /*
          var userid = 789;
          var announcementid = 789;

          instance.deleteAnnouncement(userid, announcementid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getListAnnouncements', function() {
        it('should call getListAnnouncements successfully', function(done) {
          // TODO: uncomment, update parameter values for getListAnnouncements call and complete the assertions
          /*
          var userid = 56;
          var title = "title_example";

          instance.getListAnnouncements(userid, title, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(NineToFiveApi.InlineResponse2001);
              expect(data.announcementid).to.be.a('number');
              expect(data.announcementid).to.be("0");
              expect(data.userid).to.be.a('number');
              expect(data.userid).to.be("0");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.experience).to.be.a('string');
              expect(data.experience).to.be("");
              expect(data.education).to.be.a('string');
              expect(data.education).to.be("");
              expect(data.preview).to.be.a('string');
              expect(data.preview).to.be("");
              expect(data.salary).to.be.a('number');
              expect(data.salary).to.be(0);
              expect(data.schedule).to.be.a('number');
              expect(data.schedule).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateAnnouncement', function() {
        it('should call updateAnnouncement successfully', function(done) {
          // TODO: uncomment, update parameter values for updateAnnouncement call and complete the assertions
          /*
          var userid = 56;
          var announcementid = 56;
          var body = new NineToFiveApi.Body2();
          body.title = "";
          body.experience = "";
          body.education = "";
          body.preview = "";
          body.salary = 0;
          body.schedule = 0;

          instance.updateAnnouncement(userid, announcementid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(NineToFiveApi.InlineResponse2002);
            expect(data.announcementid).to.be.a('number');
            expect(data.announcementid).to.be("0");
            expect(data.userid).to.be.a('number');
            expect(data.userid).to.be("0");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.experience).to.be.a('string');
            expect(data.experience).to.be("");
            expect(data.education).to.be.a('string');
            expect(data.education).to.be("");
            expect(data.preview).to.be.a('string');
            expect(data.preview).to.be("");
            expect(data.salary).to.be.a('number');
            expect(data.salary).to.be(0);
            expect(data.schedule).to.be.a('number');
            expect(data.schedule).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
