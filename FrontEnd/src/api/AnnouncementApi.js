/*
 * NineToFive API
 * This is NineToFive API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ndummatt@ece.auth.gr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body1', 'model/Body2', 'model/InlineResponse2001', 'model/InlineResponse2002'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body1'), require('../model/Body2'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'));
  } else {
    // Browser globals (root is window)
    if (!root.NineToFiveApi) {
      root.NineToFiveApi = {};
    }
    root.NineToFiveApi.AnnouncementApi = factory(root.NineToFiveApi.ApiClient, root.NineToFiveApi.Body1, root.NineToFiveApi.Body2, root.NineToFiveApi.InlineResponse2001, root.NineToFiveApi.InlineResponse2002);
  }
}(this, function(ApiClient, Body1, Body2, InlineResponse2001, InlineResponse2002) {
  'use strict';

  /**
   * Announcement service.
   * @module api/AnnouncementApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AnnouncementApi. 
   * @alias module:api/AnnouncementApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addAnnouncement operation.
     * @callback module:api/AnnouncementApi~addAnnouncementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new announcement to the system.
     * FR - A registered user must be able to create a new announcement. 
     * @param {Number} userid The userid of the user that submits a new announcement.
     * @param {module:model/Body1} body Announcement object that is going to be submited.
     * @param {module:api/AnnouncementApi~addAnnouncementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.addAnnouncement = function(userid, body, callback) {
      var postBody = body;

      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling addAnnouncement");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAnnouncement");
      }


      var pathParams = {
        'userid': userid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/user/{userid}/announcement', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnnouncement operation.
     * @callback module:api/AnnouncementApi~deleteAnnouncementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Announcement
     * This can only be done by the same user that created
     * @param {Number} userid The user id
     * @param {Number} announcementid The user id
     * @param {module:api/AnnouncementApi~deleteAnnouncementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAnnouncement = function(userid, announcementid, callback) {
      var postBody = null;

      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling deleteAnnouncement");
      }

      // verify the required parameter 'announcementid' is set
      if (announcementid === undefined || announcementid === null) {
        throw new Error("Missing the required parameter 'announcementid' when calling deleteAnnouncement");
      }


      var pathParams = {
        'userid': userid,
        'announcementid': announcementid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/user/{userid}/announcement/{announcementid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getListAnnouncements operation.
     * @callback module:api/AnnouncementApi~getListAnnouncementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve announcements
     * FR - A registered user must be able to view all job announcements. 
     * @param {Number} userid The userid of the user that views the announcements
     * @param {String} title A title that corresponds of the announcments, that user has searched
     * @param {module:api/AnnouncementApi~getListAnnouncementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    this.getListAnnouncements = function(userid, title, callback) {
      var postBody = null;

      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getListAnnouncements");
      }

      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling getListAnnouncements");
      }


      var pathParams = {
        'userid': userid
      };
      var queryParams = {
        'title': title,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2001];

      return this.apiClient.callApi(
        '/user/{userid}/announcement', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnnouncement operation.
     * @callback module:api/AnnouncementApi~updateAnnouncementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update announcement
     * FR - A registered user must be able to edit one of his  announcements. 
     * @param {Number} userid The userid of the user that applies an action to the existing announcement.
     * @param {Number} announcementid The ID of the announcement that is updated.
     * @param {module:model/Body2} body Announcement model
     * @param {module:api/AnnouncementApi~updateAnnouncementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.updateAnnouncement = function(userid, announcementid, body, callback) {
      var postBody = body;

      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling updateAnnouncement");
      }

      // verify the required parameter 'announcementid' is set
      if (announcementid === undefined || announcementid === null) {
        throw new Error("Missing the required parameter 'announcementid' when calling updateAnnouncement");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAnnouncement");
      }


      var pathParams = {
        'userid': userid,
        'announcementid': announcementid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/user/{userid}/announcement/{announcementid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
