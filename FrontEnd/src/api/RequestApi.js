/*
 * NineToFive API
 * This is NineToFive API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: ndummatt@ece.auth.gr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.32
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body5', 'model/InlineResponse2004', 'model/InlineResponse2005', 'model/InlineResponse2006'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body5'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'), require('../model/InlineResponse2006'));
  } else {
    // Browser globals (root is window)
    if (!root.NineToFiveApi) {
      root.NineToFiveApi = {};
    }
    root.NineToFiveApi.RequestApi = factory(root.NineToFiveApi.ApiClient, root.NineToFiveApi.Body5, root.NineToFiveApi.InlineResponse2004, root.NineToFiveApi.InlineResponse2005, root.NineToFiveApi.InlineResponse2006);
  }
}(this, function(ApiClient, Body5, InlineResponse2004, InlineResponse2005, InlineResponse2006) {
  'use strict';

  /**
   * Request service.
   * @module api/RequestApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RequestApi. 
   * @alias module:api/RequestApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addRequest operation.
     * @callback module:api/RequestApi~addRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new request.
     * FR - A  user must be able to send request to other users. 
     * @param {Number} userid The userid of the user that edit his notifications.
     * @param {module:model/Body5} body Request object that is going to be submited.
     * @param {module:api/RequestApi~addRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.addRequest = function(userid, body, callback) {
      var postBody = body;

      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling addRequest");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addRequest");
      }


      var pathParams = {
        'userid': userid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/user/{userid}/request', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the delreq operation.
     * @callback module:api/RequestApi~delreqCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete request
     * FR - The registered user must be able to delete the request that he has send. FR - The registered user must be able to delete the request that he has received.         
     * @param {Number} userid The id of the user that delete a request.
     * @param {Number} requestid The id of the request that is going to be deleted
     * @param {module:api/RequestApi~delreqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.delreq = function(userid, requestid, callback) {
      var postBody = null;

      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling delreq");
      }

      // verify the required parameter 'requestid' is set
      if (requestid === undefined || requestid === null) {
        throw new Error("Missing the required parameter 'requestid' when calling delreq");
      }


      var pathParams = {
        'userid': userid,
        'requestid': requestid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/user/{userid}/request/{requestid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNotificationsList operation.
     * @callback module:api/RequestApi~getNotificationsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2004>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve requests
     * FR - A registered user must be able to see his notifications(recieved requests). 
     * @param {Number} userid The userid of the user that views his notifications.
     * @param {module:api/RequestApi~getNotificationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2004>}
     */
    this.getNotificationsList = function(userid, callback) {
      var postBody = null;

      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getNotificationsList");
      }


      var pathParams = {
        'userid': userid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InlineResponse2004];

      return this.apiClient.callApi(
        '/user/{userid}/request', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRequest operation.
     * @callback module:api/RequestApi~updateRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateNotification(response)
     * FR - A registered user must be able to respond to his notifications (recieved requests). 
     * @param {Number} userid The userid of the user that respond to the request.
     * @param {String} requestid The id of the request that is being responded.
     * @param {module:api/RequestApi~updateRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    this.updateRequest = function(userid, requestid, callback) {
      var postBody = null;

      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling updateRequest");
      }

      // verify the required parameter 'requestid' is set
      if (requestid === undefined || requestid === null) {
        throw new Error("Missing the required parameter 'requestid' when calling updateRequest");
      }


      var pathParams = {
        'userid': userid,
        'requestid': requestid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/user/{userid}/request/{requestid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
